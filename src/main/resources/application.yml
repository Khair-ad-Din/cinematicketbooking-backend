# =============================================================================
# Movie Recommender API - Application Configuration
# =============================================================================
#
# YAML Format Benefits:
# - Human-readable configuration format
# - Supports nested structures and lists
# - Environment-specific profiles (dev, test, prod)
# - Type-safe configuration binding
#
# Configuration Structure:
# 1. Common Settings (apply to all environments)
# 2. Development Profile (for local development)
# 3. Production Profile (for deployment)
# 4. Test Profile (for automated testing)
#
# Profile System:
# Spring profiles allow different configurations for different environments.
# Activate with: java -jar app.jar --spring.profiles.active=prod
# or set: SPRING_PROFILES_ACTIVE=prod environment variable
#
# =============================================================================

# =============================================================================
# COMMON CONFIGURATION (All Environments)
# =============================================================================

spring:
  application:
    # Application name - appears in logs, actuator endpoints, and Spring Boot Admin
    name: movie-recommender-backend

  profiles:
    # Default active profile - determines which environment settings to use
    # Options: dev (development), test (testing), prod (production)
    active: dev

  # =============================================================================
  # JPA/Database Configuration
  # =============================================================================
  # Java Persistence API - handles database operations and Object-Relational Mapping (ORM)
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true

  # Redis Configuration (disabled for development)
  # data:
  #   redis:
  #     host: localhost
  #     port: 6379
  #     timeout: 2000ms
  #     lettuce:
  #       pool:
  #         max-active: 10
  #         max-idle: 5
  #         min-idle: 1

  # Cache Configuration (disabled for development)
  # cache:
  #   type: redis
  #   redis:
  #     time-to-live: 3600000 # 1 hour

  # Flyway Configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration

# Actuator Configuration
management:
  endpoint:
    health:
      show-details: always
      show-components: always
  endpoints:
    web:
      exposure:
        include: health,info,metrics

# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /api

# API Documentation
springdoc:
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
  api-docs:
    enabled: true
    path: /v3/api-docs

# CORS Configuration
app:
  cors:
    allowed-origins:
      - http://localhost:4200
      - http://localhost:3000
    allowed-methods:
      - GET
      - POST
      - PUT
      - PATCH
      - DELETE
      - OPTIONS
    allowed-headers: "*"
    allow-credentials: true

# JWT Configuration
jwt:
  secret: myVeryLongAndSecureSecretKeyForJwtTokenGeneration123456789
  expiration: 86400000 # 24 hours
  refresh-expiration: 604800000 # 7 days

# TMDB API Configuration
tmdb:
  api:
    base-url: https://api.themoviedb.org/3
    key: ${TMDB_API_KEY:my-tmdb-api-key-here}
    image-base-url: https://image.tmdb.org/t/p

# Recommendation Engine
recommendation:
  batch-size: 20
  cache-duration: 3600 # 1 hour in seconds
  algorithm:
    content-weight: 0.7
    collaborative-weight: 0.3

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev

  # H2 Database for Development
  datasource:
    url: jdbc:h2:mem:moviedb
    driver-class-name: org.h2.Driver
    username: sa
    password:

  h2:
    console:
      enabled: true
      path: /h2-console

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    database-platform: org.hibernate.dialect.H2Dialect

# Disable Redis health check for development
management:
  health:
    redis:
      enabled: false
    defaults:
      enabled: true

# Logging for Development
logging:
  level:
    com.WisdomMonkey.CinemaTicketBooking_Backend: DEBUG
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod

  # MySQL Database for Production
  datasource:
    url: jdbc:mysql://localhost:3306/TODO?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USERNAME:TODO}
    password: ${DB_PASSWORD:TODO}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    database-platform: org.hibernate.dialect.MySQL8Dialect

# Production Security
jwt:
  secret: ${JWT_SECRET:my-super-secure-jwt-secret-key}

# Production Logging
logging:
  level:
    com.WisdomMonkey.CinemaTicketBooking_Backend: INFO
    org.springframework.security: WARN
    org.springframework.web: WARN
  file:
    name: logs/application.log
    max-size: 10MB
    max-history: 30

# Production TMDB
tmdb:
  api:
    key: ${TMDB_API_KEY}

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false

  flyway:
    enabled: false

logging:
  level:
    org.springframework: WARN
    com.WisdomMonkey.CinemaTicketBooking_Backend: DEBUG
